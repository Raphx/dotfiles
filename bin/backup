#!/usr/bin/env bash

readonly USAGE="
Backup files to an archive, and encrypt it.

Usage:

  $(basename "$0") [options]

Options:

  -h    Show this help message
"

readonly KEY=$(\
  dd if=/dev/urandom bs=1 count=32 2>/dev/null \
    | base64 -w 0 \
    | rev \
    | cut -b 2- \
    | rev
  )

# On macOS, use Homebrew-installed OpenSSL over macOS default
# LibreSSL. The latter is outdated most of the time.
if [ "$(uname)" == "Darwin" ]; then
  OPENSSL="/usr/local/Cellar/openssl@1.1/1.1.1g/bin/openssl"
else
  OPENSSL="openssl"
fi
readonly OPENSSL

# Directories and files to backup
readonly TARGETS="$HOME/.ssh $HOME/.gnupg $HOME/Documents"

# Output directory
readonly OUTPUTDIRPATH="$HOME/Downloads"

# Timestamp of the backup
readonly UNIXEPOCH=$(date +%s)

# Name of encrypted archive
readonly ARCHIVEFILE="backup-$UNIXEPOCH.tar.gz.enc"

# Name of digest for encrypted archive
readonly DIGESTFILE="$ARCHIVEFILE.sum"

_die() {
  local error
  error="$1"
  echo "$error"
  exit 1
}

_archive_encrypt() {
  local item

  # Using pushd so sha512sum generates checksum for file without
  # embedding the full path of the file in the checksum file
  pushd "$OUTPUTDIRPATH" >/dev/null || _die "pushd failed"

  echo "Archiving files and directories:"
  for item in $TARGETS; do
    echo "  $item"
  done

  echo "Key: $KEY"
  echo "Encrypting to $OUTPUTDIRPATH/$ARCHIVEFILE ..."

  #shellcheck disable=SC2086
  tar cz $TARGETS 2>/dev/null \
    | "$OPENSSL" enc -aes-256-cbc -e -md sha512 -pbkdf2 -iter 20000 -pass "pass:$KEY" > "$ARCHIVEFILE"

  echo "Generating checksum ..."

  sha512sum "$ARCHIVEFILE" > "$DIGESTFILE"

  popd >/dev/null || _die "popd failed"

  echo "Done."
}

while [ -n "$1" ]; do
  case "$1" in
    -h)
      echo "$USAGE"
      exit 0
      ;;
    *)
      _die "$USAGE"
      ;;
  esac
done

_archive_encrypt
