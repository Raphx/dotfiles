" Modified from
" https://github.com/mhinz/vim-galore/blob/master/static/minimal-vimrc.vim

""""""""""""""""""""""""""""""""""""""""""""""""""
" Prelude
""""""""""""""""""""""""""""""""""""""""""""""""""
" Explicitly set nocompatible to always use Vim
set nocompatible

" Pathogen - tpope/vim-pathogen
execute pathogen#infect()

" The encoding displayed
set encoding=utf-8

" Leader
let mapleader = ","

""""""""""""""""""""""""""""""""""""""""""""""""""
" Spacing and indent
""""""""""""""""""""""""""""""""""""""""""""""""""
" Indent according to previous line
set autoindent

" Use spaces instead of tabs
set expandtab

" Display tab as 2 spaces
set tabstop=2

" Tab key indents by 2 spaces
set softtabstop=2

" >> indents by 2 spaces
set shiftwidth=2

" >> indents to next multiple of 'shiftwidth'
set shiftround

""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing
""""""""""""""""""""""""""""""""""""""""""""""""""
" Make backspace work as you would expect
set backspace=indent,eol,start

" Switch between buffers without having to save first
set hidden

" Automatically load file on change
set autoread

" Key for toggling paste mode
set pastetoggle=<F2>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""
" Case-insensitive search
set ignorecase

" Intelligently switch between case sensitivity in search
set smartcase

" Highlight while searching with / or ?
set incsearch

" Keep matches highlighted
set hlsearch

" Searches wrap around end-of-file
set wrapscan

""""""""""""""""""""""""""""""""""""""""""""""""""
" Appearance
""""""""""""""""""""""""""""""""""""""""""""""""""
" Load plugins according to detected filetype
filetype plugin indent on

" Enable syntax highlighting
syntax on

" Show ruler
set ruler

" Show line number
set number

" Use relative line mumber
set relativenumber

" Find the current line quickly
set cursorline

" Always show statusline
set laststatus=2

" Show as much as possible of the last line
set display=lastline

" Show current mode in command-line
set showmode

" Show already typed keys when more are expected
set showcmd

" Always report changed lines
set report=0

" Turn off audio and visual bells
set noerrorbells
set visualbell
set t_vb=

" Show non-printable characters
set list
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" Enhance command-line completion
set wildmenu

" Only highlight the first 200 columns
set synmaxcol=200

" Faster redrawing
set ttyfast

" Only redraw when necessary
set lazyredraw

""""""""""""""""""""""""""""""""""""""""""""""""""
" Windowing
""""""""""""""""""""""""""""""""""""""""""""""""""
" Open new windows below the current window
set splitbelow

" Open new windows right of the current window
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell check
""""""""""""""""""""""""""""""""""""""""""""""""""
" Set spell check language to English
set spelllang=en

""""""""""""""""""""""""""""""""""""""""""""""""""
" Temporary files and backups
""""""""""""""""""""""""""""""""""""""""""""""""""
" Put all temporary files under the same directory
if exists('*mkdir') && !isdirectory($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files/backup', 'p')
  call mkdir($HOME.'/.vim/files/swap', 'p')
  call mkdir($HOME.'/.vim/files/undo', 'p')
  call mkdir($HOME.'/.vim/files/info', 'p')
endif

set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetype-specific settings
""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable auto-inserting of comment leader
augroup disablecommentleaderformatting
  au!
  au BufNewFile,BufRead * setlocal formatoptions-=cro
augroup END

augroup filetypespecificsettings
  au!
  au BufRead,BufNewFile *.py setlocal softtabstop=4 shiftwidth=4
  au BufRead,BufNewFile *.rs setlocal softtabstop=4 shiftwidth=4
augroup END

" Disable special text rendering on html
let html_no_rendering = 1

""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""
" Write buffer to root-owned file
cnoremap w!! w !sudo tee > /dev/null %

" View Git commit history of the current file
nnoremap <Leader>gl<CR> :!git log -p --follow %<CR>

" Run Git blame on the current file
nnoremap <Leader>gb<CR> :!git blame %<CR>

" Run Git diff on the current file
nnoremap <Leader>gd<CR> :!git diff %<CR>

" Run mix format for Elixir source file
nnoremap <Leader>mixf<CR> :!mix format %<CR>

" Clear search highlight
nnoremap <Leader>n :nohlsearch<CR>

" Start fzf - junegunn/fzf
nnoremap <Leader>q :FZF<CR>

" Start ack.vim - mileszs/ack.vim
nnoremap <Leader>a :Ack!<Space>

" Repeat last command
nnoremap <Leader>2 @:<CR>

" Use black hole register
nnoremap <Leader>' "_

" Toggle ALE - w0rp/ale
function! ToggleALE()
  ALEToggle
  if g:ale_enabled == 1
    echo 'ALE ON'
  else
    echo 'ALE OFF'
  end
endfunction
nnoremap <silent> <Leader>l :call ToggleALE()<CR>

" Toggle spell check
function! ToggleSpellCheck()
  set spell!
  if &spell
    echo "Spellcheck ON"
  else
    echo "Spellcheck OFF"
  endif
endfunction
nnoremap <silent> <Leader>s :call ToggleSpellCheck()<CR>

" Easily switch between Vim split windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""
"" netrw
" Show line number in netrw
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'

" Hide netrw banner
let g:netrw_banner = 0

"" Raphx/modest
colorscheme modest-light

"" w0rp/ale
let g:ale_set_highlights = 0
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 0
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_enabled = 0

"" mileszs/ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
